import threading
from Queue import Queue
import time

#prevents different tasks from forgetting modifications by other tasks
#need a lock for every action
print_lock  = threading.Lock()

def exampleJob(worker):
    time.sleep(0.5)
    
    with print_lock:
        print(threading.current_thread().name, worker)
        
def threader():
    while True:
        worker = q.get()
        exampleJob(worker)
        #release the worker to the queue to be given some work
        q.task_done()

q = Queue()

for x in range(10):
    t = threading.Thread(target = threader)
    
    #die when the main thread dies
    #by default it's false
    t.daemon = True
    
    t.start()

start = time.time()

for worker in range(20):
    #literally putting a worker to work with q
    q.put(worker)
    
q.join()

print('Entire job took:', time.time()-start)
    
